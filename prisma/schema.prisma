// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  avatar        String?
  emailVerified DateTime?
  projects      Project[]
  contributions Contribution[]
  chats         Chat[]
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model Project {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  country       String
  media         Media[]
  Budget        Float
  categories    Category[]
  rewards       Reward[]
  comments      Comment[]
  contributions Contribution[]
  moneyRaised   Float          @default(0)
  user          User           @relation(fields: [creatorId], references: [id])
  creatorId     Int
}

model Contribution {
  id            Int     @id @default(autoincrement())
  amount        Float
  user          User    @relation(fields: [contributorId], references: [id])
  contributorId Int
  project       Project @relation(fields: [projectId], references: [id])
  projectId     Int
}

model Media {
  id        Int     @id @default(autoincrement())
  url       String
  type      String
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Reward {
  id               Int      @id @default(autoincrement())
  title            String
  level            Int
  description      String
  image            String
  value            Float
  quantityLimited  Boolean  @default(false)
  shippingDuration DateTime
  project          Project  @relation(fields: [projectId], references: [id])
  projectId        Int
}

model Comment {
  id        Int     @id @default(autoincrement())
  comment   String
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model Category {
  id       Int       @id @default(autoincrement())
  Name     String    @unique
  projects Project[]
}

model Chat {
  id       Int       @id @default(autoincrement())
  messages Message[]
  users    User[]
}

model Message {
  id           Int      @id @default(autoincrement())
  message      String
  creationDate DateTime @default(now())
  seen         Boolean  @default(false)
  senderId     Int
  receiverId   Int
  chatId       Int
  chat         Chat     @relation(fields: [chatId], references: [id])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
